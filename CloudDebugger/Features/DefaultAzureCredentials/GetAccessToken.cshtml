@using Azure.MyIdentity
@model CloudDebugger.Features.DefaultAzureCredentials.GetAccessTokenModel
@{
    ViewData["Title"] = "Cloud Debugger - Get Access tokens using DefaultAzureCredential";
}

<h5>Get Access Token</h5>
This page will retrieve an access token using a custom version of DefaultAzureCredential.
<br />
<a href="/DefaultAzureCredentials/index">Back</a>
<br />
<br />


@if (!String.IsNullOrWhiteSpace(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        <pre>@Model.ErrorMessage</pre>
    </div>
}

@if (!String.IsNullOrWhiteSpace(Model.Message))
{
    <b>@Model.Message</b>
}


<table class="table table-bordered">


    <tr>
        <th><h4>Execution details</h4></th>
        <th><h4>Access token</h4></th>
    </tr>

    <tr>
        <!-- Column 1 start -->
        <td class="col-md-6">
            <table>
                <tr>
                    <td>Calling GetToken took:</td>
                    <td><b>@Model.ExecutionTime</b></td>
                </tr>

                <tr>
                    <td>Requested scopes:</td>
                    <td><b>@Model.Scopes</b></td>
                </tr>
                <tr>
                    <td>
                        Log
                    </td>
                    <td>
                        <a href="/CredentialsEventLog/ViewEventLog">View the Identity log</a><br />
                        <a href="/AzureSDKEventLogViewer/ViewEventLog">View the Azure SDK log</a>
                    </td>

                </tr>
            </table>
        </td>
        <!-- Column 1 end -->
        <!-- Column 2 start -->
        <td class="col-md-6">

            @if (Model != null)
            {

                @if (Model.UrlToJWTIOSite != null)
                {
                    @:Explore the access token on <a href="@Model.UrlToJWTIOSite" target="_blank">https://jwt.io</a> or <a href="@Model.UrlToJWTMSSite" target="_blank">https://jwt.ms</a><br />
                }
                <table>

                    @if (Model.AccessToken.Token != null)
                    {
                        <tr>
                            <td>
                                <br />Expires: <b>@Model.AccessToken.ExpiresOn.ToString("HH:mm:ss") (in @((int)Model.AccessToken.ExpiresOn.Subtract(DateTime.UtcNow).TotalMinutes) min)</b><br>
                            </td>
                        </tr>
                    }
                    @if (@Model.AccessToken.RefreshOn.HasValue)
                    {
                        <tr>
                            <td>
                                <br />Refresh on <b>@Model.AccessToken.RefreshOn.Value.ToString("HH:mm:ss") (in @((int)Model.AccessToken.RefreshOn.Value.Subtract(DateTime.UtcNow).TotalMinutes) min)</b><br />
                                Specifies the time when the cached token should be proactively refreshed.
                            </td>
                        </tr>
                    }

                    <tr>
                        <td>&nbsp;</td>
                    </tr>

                    <tr>
                        <td id="access_token" style="width: 500px; word-wrap: break-word; display: inline-block; vertical-align: top;">
                            @(Model.AccessToken.Token ?? "No token found")
                        </td>
                    </tr>
                </table>
            }
        </td>

        <!-- Column 2 end -->

    </tr>
</table>

<br />
<br />

<h4>Selected credential provider</h4>
This is the token credential that successfully retrieved an access token.
<table class="table table-bordered">

    @if (Model?.SelectedTokenCredential != null)
    {
        <tr>
            <th>
                Selected TokenCredential: <b>@Model.SelectedTokenCredential.GetType().Name</b>
            </th>
        </tr>
        <tr>
            <td>
                <pre>@Model.SelectedTokenCredential.ToString()</pre>
            </td>
        </tr>
    }
    else
    {
        <tr>
            <td>
                <b>No TokenCredentials was selected</b>
            </td>
        </tr>
    }
</table>


<br />
<br />

<h5>Credential sources</h5>
These are the sources that DefaultAzureCredential will execute if needed.
@if (Model != null && Model.MyDefaultAzureCredential != null && Model.MyDefaultAzureCredential._sources != null)
{
    <table class="table table-bordered">

        <tr>
            <th>Name</th>
            <th>Log</th>
        </tr>

        @foreach (var source in Model.MyDefaultAzureCredential._sources)
        {
            if (source != null)
            {
                <tr>
                    <td>@source.GetType().Name</td>
                    <td><pre>@source.ToString()</pre></td>
                </tr>
            }
        }
    </table>
}
else
{
    <b>No credential sources found</b>
}

<br />
<br />

<h5>DefaultAzureCredential Log</h5>
This is an internal DefaultAzureCredential log.
@if (Model != null && Model.MyDefaultAzureCredentialLog != null)
{
    <table class="table table-bordered">
        <tr>
            <th>
            </th>
        </tr>
        <tr>
            <td>
                <pre>@Model.MyDefaultAzureCredentialLog</pre>
            </td>
        </tr>
    </table>
}
else
{
    <b>No log found</b>
}


<br />
<br />
@{
    var options = new DefaultAzureCredentialOptions()
    {
    };
}

<h5>Default Retry Policy</h5>
The default retry policy for DefaultAzureCredential as defined in DefaultAzureCredentialOptions.
<table class="table table-bordered">
    <tr>
        <th>
            Property
        </th>
        <th>
            Value
        </th>
    </tr>
    <tr>
        <td>Delay</td>
        <td><b>@options.Retry.Delay.TotalSeconds sec</b> (The delay between retry attempts)</td>
    </tr>
    <tr>
        <td>MaxDelay</td>
        <td><b>@options.Retry.MaxDelay.TotalSeconds sec</b> (The maximum permissible delay)</td>
    </tr>
    <tr>
        <td>MaxRetries</td>
        <td><b>@options.Retry.MaxRetries</b> (The maximum number of retry attempts before giving up)</td>
    </tr>
    <tr>
        <td>Mode</td>
        <td><b>@options.Retry.Mode</b> (The approach to use for calculating retry delays)</td>
    </tr>
    <tr>
        <td>NetworkTimeout</td>
        <td><b>@options.Retry.NetworkTimeout.TotalSeconds sec</b> (The timeout applied to an individual network operations)</td>
    </tr>
    @if (@options.RetryPolicy != null)
    {
        <tr>
            <td>RetryPolicy</td>
            <td>@options.RetryPolicy</td>
        </tr>
    }
</table>




<br />
<br />
<h5>Resources</h5>
<ul>
    <li><a href="https://github.com/tndata/CloudDebugger/wiki/DefaultAzureCredentials">Documentation</a></li>
</ul>